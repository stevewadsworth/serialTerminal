{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Terminal.svelte",
    "../../ConfigureTerminal.svelte",
    "../../DropDown.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { fade } from 'svelte/transition';\n\timport Terminal from \"./Terminal.svelte\"\n\timport ConfigureTerminal from \"./ConfigureTerminal.svelte\"\n\timport StatusLine from './StatusLine.svelte'\n\n\tlet config = null;\n\tlet connected = false\n\n\tdocument.title = \"Serial Terminal\";\n\n\t$: {\n\t\tif (config) {\n\t\t\tconnected = true\n\t\t}\n\t}\n</script>\n\n<main>\n\t{#if !connected}\n\t\t<div transition:fade>\n\t\t\t<ConfigureTerminal bind:config={config}/>\n\t\t\t<div id='welcome'>\n\t\t\t\t<h1>Serial Terminal</h1>\n\t\t\t</div>\n\t\t</div>\n\t{:else}\n\t\t<StatusLine {...config}/>\n\t\t<Terminal {...config}/>\n\t{/if}\n</main>\n\n<style>\n\tmain {\n\t\theight: 100%;\n\t\twidth: 100%;\n\t}\n\n\t#welcome {\n \t\ttext-align: center;\n \t\tpadding: 1em;\n \t\tmargin: auto auto;\n \t}\n \th1 {\n \t\tcolor: #ff9900;\n \t\ttext-transform: uppercase;\n \t\tfont-size: 4em;\n \t\tfont-weight: 100;\n \t}\n</style>\n",
    "<script>\n  const { remote } = require('electron')\n  const { Menu, MenuItem, clipboard } = remote\n\n  import { onMount, onDestroy, beforeUpdate, afterUpdate } from \"svelte\";\n  import serial from \"./modules/serial\";\n\n  export let path;\n  export let baudRate;\n  export let dataBits;\n  export let parity;\n  export let stopBits;\n  export let localEcho;\n\n  export let isConnected = false;\n\n  export let scrollBack = 100000; // Default to 100,000 lines of history\n\n  let div;\n  let autoscroll;\n  let rxData = [\"\"];\n\n  let port;\n\n  const printToLine = (c, acc) => {\n    let str = acc[acc.length -1]\n\n    if (c === '\\b') {\n      str = str.slice(0, -1)\n    } else {\n      str += c;\n    }\n\n    acc[acc.length -1] = str\n\n    if (c === '\\n') {\n      acc.push(new String());\n      if (acc.length > scrollBack) {\n        acc.shift(); // Discard the first line\n      }\n    }\n\n    return acc;\n  }\n\n  const normaliseKey = (key) => {\n    if (key.length > 1) {\n      switch (key) {\n        case 'Enter':\n          key = '\\n'\n          break\n        case 'Backspace':\n          key = '\\b'\n          break;\n        default:\n          console.log(key)\n          key = \"\"\n          break\n      }\n    }\n    return key\n  }\n\n  const keyPressed = (key) => {\n    key = normaliseKey(key)\n    port.write(key, 'utf8');\n\n    if (localEcho) {\n      rxData = printToLine(key, rxData);\n    }\n    // Auto scroll to the bottom on keypress\n    div.scrollTo(0, div.scrollHeight);\n  };\n\n  onMount(async function() {\n    port = serial.openPort(path, baudRate, dataBits, parity, stopBits);\n\n    port.on('error', err => {\n      console.error('Error', err);\n      isConnected = false;\n    })\n\n    port.on('close', err => {\n      console.log('Closed', err)\n      isConnected = false;\n    })\n\n    port.on(\"data\", chunk => {\n      for (const c of chunk) {\n        rxData = printToLine(String.fromCharCode(c), rxData);\n      }\n    });\n\n    isConnected = true;\n\n    document.onkeydown = (e) => {\n      if (!e.ctrlKey && !e.metaKey && !e.altKey && e.key != \"Shift\") {\n        keyPressed(e.key)\n        e.preventDefault()\n      }\n    };\n\n    // Handle Paste events. We get Copy for free, but Paste needs a bit of work.\n    div.addEventListener('paste', (event) => {\n      event.preventDefault()\n      const text = clipboard.readText();\n      for (const c of text) {\n        keyPressed(c)\n      }\n      event.preventDefault();\n    });\n  });\n\n  onDestroy(() => {\n    port.close();\n  })\n\n  beforeUpdate(() => {\n    // Only scroll if we are at the bottom already\n    autoscroll = div && div.offsetHeight + div.scrollTop > div.scrollHeight - 20;\n  });\n\n  afterUpdate(() => {\n    if (autoscroll) {\n      div.scrollTo(0, div.scrollHeight);\n    }\n  });\n\n  // Add a right click context menu\n  const menu = new Menu()\n  menu.append(new MenuItem({ label: 'Clear', click() {rxData = [\"\"]}}))\n  menu.append(new MenuItem({ type: 'separator' }))\n  menu.append(new MenuItem({ label: 'Local Echo', type: 'checkbox', checked: localEcho, click() {localEcho = !localEcho} }))\n  menu.append(new MenuItem({ type: 'separator' }))\n  menu.append(new MenuItem({ role: 'selectAll' }))\n  menu.append(new MenuItem({ role: 'copy' }))\n  menu.append(new MenuItem({ role: 'paste' }))\n\n  window.addEventListener('contextmenu', (e) => {\n    e.preventDefault()\n    menu.popup({ window: remote.getCurrentWindow() })\n  }, false);\n\n</script>\n\n<style>\n  div {\n    box-sizing: border-box;\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    overflow: scroll;\n    border: 10px;\n    border-style: solid;\n    border-color: white;\n  }\n\n  div > pre {\n    text-align: left;\n    margin: 0;\n    font-family: Menlo, \"Courier New\", Courier, monospace;\n    font-size: 14px;\n  }\n</style>\n\n<div bind:this={div}>\n  {#each rxData as line}\n    <pre>{line}</pre>\n  {/each}\n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import serial from \"./modules/serial\"\n  import DropDown from './DropDown.svelte'\n\n  export let config = {};\n\n  const emptyPath = '--';\n\n  let paths = []\n  let baudRates = [300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 76800, 115200, 230400];\n  let stopBitsList = [1, 2];\n  let parityList = ['none', 'even', 'odd', 'mark', 'space'];\n  let dataBitsList = [7, 8];\n  let localEchoList = ['no', 'yes'];\n\n  let path = emptyPath;\n  let baudRate = 115200;\n  let stopBits = 1;\n  let parity = 'none';\n  let dataBits = 8;\n  let localEcho = 'no';\n\n\tfunction handleSubmit() {\n    config = {\n      path,\n      baudRate,\n      dataBits,\n      parity,\n      stopBits,\n      localEcho: localEcho === 'yes' ? true : false\n    }\n\t}\n\n  onMount(async function() {\n    const ports = await serial.listPorts()\n    paths = ports.map( item => item.path)\n    paths.unshift(emptyPath);\n    console.log(paths);\n\t})\n\n</script>\n\n<style>\nbutton {\n  flex-grow: 1;\n  margin: 0.5rem;\n}\n\nform {\n  display: flex;\n  flex-direction: row;\n}\n</style>\n\n<form on:submit|preventDefault={handleSubmit}>\n  <DropDown label='Path' bind:value={path} items={paths}/>\n  <DropDown label='Baud' bind:value={baudRate} items={baudRates}/>\n  <DropDown label='Data Bits' bind:value={dataBits} items={dataBitsList}/>\n  <DropDown label='Parity' bind:value={parity} items={parityList}/>\n  <DropDown label='Stop Bits' bind:value={stopBits} items={stopBitsList}/>\n  <DropDown label='Local Echo' bind:value={localEcho} items={localEchoList}/>\n\t<button disabled={path === emptyPath} type=submit>\n\t\tConnect\n\t</button>\n</form>\n",
    "<script>\n  import { onMount } from \"svelte\";\n\n  export let items = [];\n  export let label = \"Choose:\";\n\n  export let value;\n\n  onMount(async function() {\n    console.log(items)\n  })\n</script>\n\n<style>\ndiv {\n  margin: 0.5rem;\n}\n\nselect {\n  min-width: 3rem;\n}\nlabel {\n  font-size: 10px;\n}\n</style>\n\n<div>\n  <label for=list>{label}</label>\n  <select id=list bind:value={value}>\n    {#each items as item}\n      <option value={item}>\n        {item}\n      </option>\n    {/each}\n  </select>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAiCC,IAAI,cAAC,CAAC,AACL,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,IAAI,CAAC,IAAI,AAClB,CAAC,AACD,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC;ACkGD,GAAG,4BAAC,CAAC,AACH,UAAU,CAAE,UAAU,CACtB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,KAAK,AACrB,CAAC,AAED,iBAAG,CAAG,GAAG,cAAC,CAAC,AACT,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CACrD,SAAS,CAAE,IAAI,AACjB,CAAC;ACxHH,MAAM,eAAC,CAAC,AACN,SAAS,CAAE,CAAC,CACZ,MAAM,CAAE,MAAM,AAChB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACrB,CAAC;ACtCD,GAAG,cAAC,CAAC,AACH,MAAM,CAAE,MAAM,AAChB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,AACjB,CAAC"
}