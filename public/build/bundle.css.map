{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../terminal.svelte",
    "../../Terminal.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { onMount } from \"svelte\";\n\timport serial from \"./modules/serial\"\n\timport Terminal from \"./Terminal.svelte\"\n\n\texport let name;\n\n\tlet ports = [];\n\n    onMount(async function() {\n\t\tports = await serial.listPorts()\n\t})\n</script>\n\n<main>\n\t<h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n\t{#each ports as item}\n\t\t<p>{item.path}</p>\n\t{/each}\n</main>\n<Terminal path={'/dev/tty.SLAB_USBtoUART'}/>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\n    import { onMount } from \"svelte\";\n\timport serial from \"./modules/serial\"\n\n    export let path = \"\"\n    export let baudRate = 115200\n    export let dataBits = 8\n    export let parity = \"none\"\n    export let stopBits = 1\n\n\tlet rxData = \"\"\n\n    onMount(async function() {\n        debugger\n\t\tconst port = serial.openPort(path, baudRate, dataBits, parity, stopBits)\n\t\tport.on('data', (chunk) => {\n\t\t\trxData += chunk\n        } )\n    })\n</script>\n\n<style>\ndiv {\n    height: 100%;\n    width: 100%;\n    overflow: scroll;\n}\n\ndiv p {\n    text-align: right;\n}\n</style>\n\n<div>\n    <p>{rxData}</p>\n</div>\n",
    "<script>\n    import { onMount } from \"svelte\";\n\timport serial from \"./modules/serial\"\n\n    export let path = \"\"\n    export let baudRate = 115200\n    export let dataBits = 8\n    export let parity = \"none\"\n    export let stopBits = 1\n\n    let rxData = []\n    let acc = []\n    let line = \"\"\n\n    onMount(async function() {\n\t\tconst port = serial.openPort(path, baudRate, dataBits, parity, stopBits)\n\t\tport.on('data', (chunk) => {\n            acc.push(chunk)\n            rxData = acc\n        } )\n    })\n</script>\n\n<style>\ndiv {\n    height: 100%;\n    width: max-content;\n    overflow-y: scroll;\n}\n\ndiv > p {\n    text-align: left;\n    margin: 0;\n    font-family: 'Courier New', Courier, monospace;\n}\n\n</style>\n\n<div>\n    {#each rxData as line}\n        <p>{line}</p>\n    {/each}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAwBC,IAAI,cAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AACD,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;AClBF,GAAG,4BAAC,CAAC,AACD,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,MAAM,AACpB,CAAC,AAED,iBAAG,CAAC,CAAC,cAAC,CAAC,AACH,UAAU,CAAE,KAAK,AACrB,CAAC;ACND,GAAG,4BAAC,CAAC,AACD,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,WAAW,CAClB,UAAU,CAAE,MAAM,AACtB,CAAC,AAED,iBAAG,CAAG,CAAC,cAAC,CAAC,AACL,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,AAClD,CAAC"
}